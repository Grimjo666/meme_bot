from aiogram import types, Dispatcher
from create_db import get_message_stats_from_db

from collections import defaultdict



async def start_command(message: types.Message):
    await message.reply('–ó–¥–µ—Å—å –µ—Å—Ç—å —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –±–∞–∑–∞')


async def send_message_info(message: types.Message):
    data = get_message_stats_from_db()
    statistic_text = ''
    for item in data:
        statistic_text += f'{item[1]} ({item[2]}) –æ—Ç–ø—Ä–∞–≤–∏–ª {item[3] + item[4] + item[7]} —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–∑ –Ω–∏—Ö:\n\n'
        statistic_text += f'-- {item[3]} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö, –æ–±—â–µ–π –¥–ª–∏–Ω–Ω–æ–π {item[5]} —Å–∏–º–≤–æ–ª–æ–≤\n'
        statistic_text += f'-- {item[4]} –≥–æ–ª–æ—Å–æ–≤—ã—Ö, –æ–±—â–µ–π –¥–ª–∏–Ω–æ–π {item[6]} —Å–µ–∫—É–Ω–¥\n'
        statistic_text += f'-- {item[7]} —Å—Ç–∏–∫–µ—Ä(–≤)\n*3'
    await message.answer(statistic_text)


# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∏–∞–≥—Ä–∞–º–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message_diagram(message: types.Message):
    data = get_message_stats_from_db()
    all_mes_dict = defaultdict(int)
    diagram = ''
    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É —Å –∏–Ω—Ñ–æ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ,
    # –∑–∞–±–∏—Ä–∞–µ–º –∏–º—è, –Ω–∏–∫, –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö, –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ —Å—Ç–∏–∫–µ—Ä–æ–≤
    for _, name, username, text_c, voice_c, _, _, sticker_c in data:
        all_mes_dict[f'{name} ({username})'] = text_c + voice_c + sticker_c

    count_all_messages = sum(all_mes_dict.values())

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for person, num in sorted(all_mes_dict.items(), key=lambda x: x[1], reverse=True)[:5]:

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —á–∞—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        percent = round(num / count_all_messages * 100) // 10
        if percent == 0:
            percent = 1

        diagram += f'{person}: {"üî∏" * percent}\n'
    await message.answer(diagram)


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start', 'help'])
    dp.register_message_handler(send_message_info, commands=['show_stats_info'])
    dp.register_message_handler(send_message_diagram, commands=['show_dg'])

